<pre class="metadata">
Title: Async Local Storage
Shortname: als
Repository: domenic/async-local-storage
Inline Github Issues: true
Status: DREAM
Boilerplate: omit conformance, omit feedback-header
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me, https://domenic.me/
Abstract: This specification details a layered web API for an asynchronous key value store, in the style of the original <span class="non-normative">{{Window/localStorage}}</span>.
!Participate: <a href="https://github.com/domenic/async-local-storage">GitHub domenic/async-local-storage</a> (<a href="https://github.com/domenic/async-local-storage/issues/new">new issue</a>, <a href="https://github.com/domenic/async-local-storage/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/domenic/async-local-storage/commits/master/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
</pre>

<pre class="anchors">
url: https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage; type: attribute; text: localStorage; for: Window; spec: HTML

url: https://github.com/drufball/layered-apis/blob/master/README.md#part-1-the-infrastructure; type: dfn; text: API identifier; spec: LWAPI

urlPrefix: https://tc39.github.io/ecma262/#; spec: ECMASCRIPT
  text: Map; url: sec-map-objects; type: interface
  text: Construct; url: sec-construct; type: abstract-op
  text: current Realm; url: current-realm; type: dfn

urlPrefix: https://w3c.github.io/IndexedDB/; spec: INDEXEDDB; type: dfn
  text: database
  text: upgrade transaction
  text: object store;
  text: open a database
  text: open request
  text: active; for: transaction
  text: name; for: object store
  text: IndexedDB connection; url: #connection
</pre>

<pre class="biblio">
{
  "LWAPI": {
    "authors": [
      "Domenic Denicola",
      "Dru Knox",
      "Ojan Vafai"
    ],
    "href": "https://github.com/drufball/layered-apis/blob/master/README.md",
    "title": "Layered APIs"
  }
}
</pre>

<style>
.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

/* hide ugly stuff that is moved to the acks */
[data-fill-with="spec-metadata"] .editor {
  display: none;
}

[data-fill-with="copyright"] {
  display: none;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>


<h2 id="intro">Introduction</h2>

<div class="non-normative">

<em>This section is non-normative.</em>

The {{Window/localStorage}} API is widely used, and loved for its simplicity. However, its synchronous nature leads to <a href="https://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/">terrible performance</a> and cross-window synchronization issues.

This specification proposes a new API, called async local storage, which is intended to provide an analogously simple interface, while being asynchronous. Along the way, it embraces some additional goals:

* <strong>Layer on top of Indexed Database.</strong> This both fulfills the mandate of layered web APIs to build on top of existing platform features, and allows an upgrade path to full IndexedDB usage if a web developer outgrows the async local storage interface. [[INDEXEDDB]] [[LWAPI]]

* <strong>Modernize the API surface.</strong> Modern key/value stores in the platform, such as the {{Cache}} or {{Headers}} APIs, have aligned around the operation names given by JavaScript's {{Map}}. We follow their example. As a bonus, this allows us to avoid the legacy [=named properties=] feature that the {{Storage}} interface uses.

* <strong>Support isolated storage areas.</strong> {{Window/localStorage}} requires careful namespacing of keys to use robustly in a multi-actor environment. Popular libraries meant to replace it, like <a href="https://localforage.github.io/localForage/">localForage</a>, have included a way to create new storage areas beyond the default one.

</div>


<h2 id="module">The <code>async-local-storage</code> layered web API</h2>

This specification defines a new layered web API, whose [=API identifier=] is "<dfn><code>async-local-storage</code></dfn>" and whose exports are the following:

: <code>StorageArea</code>
:: The {{StorageArea}} class
: <code>storage</code>
:: An instance of the {{StorageArea}} class, created as if by <a abstract-op>Construct</a>({{StorageArea}}, « "<code>default</code>" »).

<div class="example" id="example-importing">
  To get access to these exports, one would use the usual syntax for layered web APIs:

  <xmp highlight="js">
    import { storage, StorageArea } from
        "std:async-local-storage|https://somecdn.com/async-local-storage-polyfill.js";
  </xmp>
</div>


<h2 id="storagearea" interface lt="StorageArea">The <code>StorageArea</code> class</h2>

Upon evaluating the <a><code>async-local-storage</code></a> layered API module, the {{StorageArea}} class must be created in the [=current Realm=]. The result must be equivalent to evaluating the following JavaScript code, with the exception that the constructor, method, and getter bodies must behave as specified below instead of being the no-ops shown in this code block:

<pre highlight="js">
  class StorageArea {
    constructor(name) {}

    set(key, value) {}
    get(key) {}
    has(key) {}
    delete(key) {}
    clear() {}

    keys() {}
    values() {}
    entries() {}

    get backingStore() {}
  }
</pre>

Each {{StorageArea}} instance must also contain the following internal slots:

<table>
  <thead>
    <tr>
      <th>Internal Slot
      <th>Initial Value
      <th>Description (<em>non-normative</em>)
  </thead>
  <tr>
    <td>\[[Connection]]
    <td>null
    <td>An [=IndexedDB connection=] or null
  <tr>
    <td>\[[ConnectionException]]
    <td>null
    <td>An exception encountered during the connection process or null
</table>

<h3 id="storagearea-constructor" constructor for="StorageArea">constructor(|name|)</h3>

<div class="algorithm">
  1. Let |storageArea| be this {{StorageArea}} object.
  1. Set |storageArea|'s internal slots to the initial values indicated in [[#storagearea]].
  1. Let |origin| be the [=current settings object=]'s [=environment settings object/origin=].
  1. If |origin| is an [=opaque origin=], throw a "{{SecurityError}}" {{DOMException}}.
  1. Let |request| be a new [=open request=].
  1. Let |upgrade callback| be a new [=callback function=] whose [=callback context=] is the [=current settings object=] and whose object reference is a new JavaScript function that performs the following steps:
    1. Assert: |storageArea|.\[[Connection]] is not null.
    1. Let |database| be the [=database=] associated with |storageArea|.\[[Connection]].
    1. Assert: |database|'s [=upgrade transaction=] is [=transaction/active=].
    1. If an [=object store=] [=object store/name|name=] |name| already exists in |database|, throw a "{{ConstraintError}}" {{DOMException}}.
    1. Let |store| be a new [=object store=] in |database|.
    1. Set |store|'s [=object store/name=] to |name|.
  1. Let |upgrade listener| be a new [=event listener=] whose type is "<code>upgradeneeded</code>", callback is |upgrade callback|, capture is false, passive is false, and once is false.
  1. [=list/Append=] |upgrade listener| to |request|'s [=event listeners=].
  1. Run these steps [=in parallel=]:
    1. Let |result| be the result of [=open a database|opening a database=], given |origin|, "<code>async-local-storage</code>", 1, and |request|.
    1. [=Queue a task=] to run these steps:
      1. If |result| is an [=IndexedDB connection=], set |storageArea|.\[[Connection]] to |result|.
      1. Otherwise, set |storageArea|.\[[ConnectionException]] to |result|.
</div>

<div class="note">
  Modulo issues around tampered-with globals and prototypes, the above is roughly equivalent to the following JavaScript code:

  <pre highlight="js">
    class StorageArea {
      constructor(name) {
        try {
          const openRequest = indexedDB.open("async-local-storage", 1);

          openRequest.onerror = () => {
            this.#connectionException = openRequest.error;
          };
          openRequest.onupgradeneeded = () => {
            openRequest.result.createObjectStore(name);
          };
          openRequest.onsuccess = () => {
            this.#connection = openRequest.result;
          };
        } catch (e) {
          this.#connectionException = e;
        }
      }

      // ...
    }
  </pre>
</div>

<h3 id="storagearea-set" method for="StorageArea">set(|key|, |value|)</h3>

TODO: set |key| and |value| in the IDB store

<h3 id="storagearea-get" method for="StorageArea">get(|key|)</h3>

TODO: get |key| from the IDB store

<h3 id="storagearea-has" method for="StorageArea">has(|key|)</h3>

TODO: check for the presence of |key| in the IDB store

<h3 id="storagearea-delete" method for="StorageArea">delete(|key|)</h3>

TODO: delete the entry identified by |key| in the IDB store

<h3 id="storagearea-clear" method for="StorageArea">clear()</h3>

TODO: delete all entries

<h3 id="storagearea-keys" method for="StorageArea">keys()</h3>

TODO: return all the keys

<h3 id="storagearea-values" method for="StorageArea">values()</h3>

TODO: return all the values

<h3 id="storagearea-entries" method for="StorageArea">entries()</h3>

TODO: return all the entries

<h3 id="storagearea-backingstore" attribute for="StorageArea" lt="backingStore">get backingStore()</h3>

TODO: return all the backing store info


<h2 id="acks" class="no-num">Acknowledgments</h2>

The editor would like to thank
(nobody yet)
for their contributions to this specification.

This standard is written by <a href="https://domenic.me/">Domenic Denicola</a> (<a href="https://google.com">Google</a>, <a href="mailto:d@domenic.me">d@domenic.me</a>).

Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent possible under law, the editor has waived all copyright and related or neighboring rights to this work.

<h2 id="conformance" class="no-num">Conformance</h2>

This specification depends on the Infra Standard. [[!INFRA]]
