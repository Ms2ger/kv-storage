<pre class="metadata">
Title: Async Local Storage
Shortname: als
Repository: domenic/async-local-storage
Inline Github Issues: true
Status: DREAM
Boilerplate: omit conformance, omit feedback-header
Editor: Domenic Denicola, Google https://www.google.com/, d@domenic.me, https://domenic.me/
Abstract: This specification details a layered web API for an asynchronous key value store, in the style of the original <span class="non-normative">{{Window/localStorage}}</span>.
!Participate: <a href="https://github.com/domenic/async-local-storage">GitHub domenic/async-local-storage</a> (<a href="https://github.com/domenic/async-local-storage/issues/new">new issue</a>, <a href="https://github.com/domenic/async-local-storage/issues?state=open">open issues</a>)
!Commits: <a href="https://github.com/domenic/async-local-storage/commits/master/spec.bs">GitHub spec.bs commits</a>
Complain About: accidental-2119 yes, missing-example-ids yes
Indent: 2
Default Biblio Status: current
</pre>

<pre class="anchors">
url: https://html.spec.whatwg.org/multipage/webstorage.html#dom-localstorage; type: attribute; text: localStorage; for: Window; spec: HTML

url: https://github.com/drufball/layered-apis/blob/master/README.md#part-1-the-infrastructure; type: dfn; text: API identifier; spec: LWAPI

urlPrefix: https://tc39.github.io/ecma262/#; spec: ECMASCRIPT
  text: Map; url: sec-map-objects; type: interface
  text: ToString; url: sec-tostring; type: abstract-op
  text: Construct; url: sec-construct; type: abstract-op
  text: current Realm; url: current-realm; type: dfn

urlPrefix: https://w3c.github.io/IndexedDB/; spec: INDEXEDDB; type: dfn
  text: database
  text: upgrade transaction
  text: object store
  text: open a database
  text: open request
  text: object store handle
  text: asynchronously executing a request
  text: retrieve a value from an object store
  text: convert a value to a key range
  text: result; for: request
  text: error; for: request
  text: object store; for: object store handle
  text: transaction; for: object store handle
  text: close pending flag; for: connection
  text: create; for: transaction
  text: active; for: transaction
  text: cleanup event loop; for: transaction
  text: name; for: object store
  text: IndexedDB connection; url: #connection
</pre>

<pre class="link-defaults">
  spec: promises-guide; type: dfn; text: resolve
</pre>

<pre class="biblio">
{
  "LWAPI": {
    "authors": [
      "Domenic Denicola",
      "Dru Knox",
      "Ojan Vafai"
    ],
    "href": "https://github.com/drufball/layered-apis/blob/master/README.md",
    "title": "Layered APIs"
  }
}
</pre>

<style>
.selected-text-file-an-issue {
  position: fixed;
  bottom: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.8);
  font-size: smaller;
  padding: 4px 10px;
  z-index: 4;
}

/* hide ugly stuff that is moved to the acks */
[data-fill-with="spec-metadata"] .editor {
  display: none;
}

[data-fill-with="copyright"] {
  display: none;
}
</style>

<script src="https://resources.whatwg.org/file-issue.js" async></script>


<h2 id="intro">Introduction</h2>

<div class="non-normative">

<em>This section is non-normative.</em>

The {{Window/localStorage}} API is widely used, and loved for its simplicity. However, its synchronous nature leads to <a href="https://hacks.mozilla.org/2012/03/there-is-no-simple-solution-for-local-storage/">terrible performance</a> and cross-window synchronization issues.

This specification proposes a new API, called async local storage, which is intended to provide an analogously simple interface, while being asynchronous. Along the way, it embraces some additional goals:

* <strong>Layer on top of Indexed Database.</strong> This both fulfills the mandate of layered web APIs to build on top of existing platform features, and allows an upgrade path to full IndexedDB usage if a web developer outgrows the async local storage interface. [[INDEXEDDB]] [[LWAPI]]

* <strong>Modernize the API surface.</strong> Modern key/value stores in the platform, such as the {{Cache}} or {{Headers}} APIs, have aligned around the operation names given by JavaScript's {{Map}}. We follow their example. As a bonus, this allows us to avoid the legacy [=named properties=] feature that the {{Storage}} interface uses.

* <strong>Support isolated storage areas.</strong> {{Window/localStorage}} requires careful namespacing of keys to use robustly in a multi-actor environment. Popular libraries meant to replace it, like <a href="https://localforage.github.io/localForage/">localForage</a>, have included a way to create new storage areas beyond the default one.

</div>


<h2 id="module">The <code>async-local-storage</code> layered web API</h2>

This specification defines a new layered web API, whose [=API identifier=] is "<dfn><code>async-local-storage</code></dfn>" and whose exports are the following:

: <code>StorageArea</code>
:: The {{StorageArea}} class
: <code>storage</code>
:: An instance of the {{StorageArea}} class, created as if by <a abstract-op>Construct</a>({{StorageArea}}, « "<code>default</code>" »).

<div class="example" id="example-importing">
  To get access to these exports, one would use the usual syntax for layered web APIs:

  <xmp highlight="js">
    import { storage, StorageArea } from
        "std:async-local-storage|https://somecdn.com/async-local-storage-polyfill.js";
  </xmp>
</div>


<h2 id="storagearea" interface lt="StorageArea">The <code>StorageArea</code> class</h2>

Upon evaluating the <a><code>async-local-storage</code></a> layered API module, the {{StorageArea}} class must be created in the [=current Realm=]. The result must be equivalent to evaluating the following JavaScript code, with the exception that the constructor, method, and getter bodies must behave as specified below instead of being the no-ops shown in this code block:

<pre highlight="js">
  class StorageArea {
    constructor(name) {}

    set(key, value) {}
    get(key) {}
    has(key) {}
    delete(key) {}
    clear() {}

    keys() {}
    values() {}
    entries() {}

    get backingStore() {}
  }
</pre>

Each {{StorageArea}} instance must also contain the following internal slots:

<table>
  <thead>
    <tr>
      <th>Internal Slot
      <th>Initial Value
      <th>Description (<em>non-normative</em>)
  </thead>
  <tr>
    <td>\[[Name]]
    <td>null
    <td>A string containing the name of the storage area
  <tr>
    <td>\[[DatabasePromise]]
    <td>null
    <td>A promise for an {{IDBDatabase}} object, lazily initialized when [=perform a database operation|performing any database operation=]
</table>

<h3 id="storagearea-constructor" constructor for="StorageArea">constructor(|name|)</h3>

<div class="algorithm">
  1. Let |area| be this {{StorageArea}} object.
  1. Set |area|'s internal slots to the initial values indicated in [[#storagearea]].
  1. Set |area|.\[[Name]] to <a abstract-op>ToString</a>(|name|).
</div>

<h3 id="storagearea-set" method for="StorageArea">set(|key|, |value|)</h3>

TODO: set |key| and |value| in the IDB store

<h3 id="storagearea-get" method for="StorageArea">get(|key|)</h3>

<div class="algorithm">
  1. If |key| is an {{IDBKeyRange}}, return [=a promise rejected with=] a {{TypeError}}.
  1. Return the result of [=performing a database operation=] on this object that runs the following steps, given |database|:
    1. Let |transaction| be the result of performing the steps listed in the description of {{IDBDatabase}}'s {{IDBDatabase/transaction()}} method on |database|, given the arguments "<code>store</code>" and "<code>readonly</code>".
    1. Let |store| be the result of performing the steps listed in the description of {{IDBTransaction}}'s {{IDBTransaction/objectStore()}} method on |transaction|, given the argument "<code>store</code>".
    1. Let |request| be the result of performing the steps listed in the description of {{IDBObjectStore}}'s {{IDBObjectStore/get()}} method on |store|, given the argument |key|.
    1. Let |promise| be [=a new promise=].
    1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with |request|'s [=request/result=].
    1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
    1. Return |promise|.
</div>

<h3 id="storagearea-has" method for="StorageArea">has(|key|)</h3>

TODO: check for the presence of |key| in the IDB store

<h3 id="storagearea-delete" method for="StorageArea">delete(|key|)</h3>

TODO: delete the entry identified by |key| in the IDB store

<h3 id="storagearea-clear" method for="StorageArea">clear()</h3>

TODO: delete all entries

<h3 id="storagearea-keys" method for="StorageArea">keys()</h3>

TODO: return all the keys

<h3 id="storagearea-values" method for="StorageArea">values()</h3>

TODO: return all the values

<h3 id="storagearea-entries" method for="StorageArea">entries()</h3>

TODO: return all the entries

<h3 id="storagearea-backingstore" attribute for="StorageArea" lt="backingStore">get backingStore()</h3>

TODO: return all the backing store info

<h3 id="supporting">Supporting operations</h3>

To <dfn>add a simple event listener</dfn>, given an {{EventTarget}} |target|, an event type string |type|, and a set of steps |steps|:

<div class="algorithm">
  1. Let |callback| be a new [=callback function=] whose [=callback context=] is the [=current settings object=] and whose object reference is a new JavaScript function that performs the steps given by |steps|. Other properties of the function (such as its <code>name</code> and <code>length</code> properties, or \[[Prototype]]) are unobservable, and can be chosen arbitrarily.
  1. Let |listener| be a new [=event listener=] whose type is |type|, callback is |callback|, capture is false, passive is false, and once is false.
  1. [=list/Append=] |listener| to |target|'s [=event listeners=].
</div>

To <dfn lt="performing a database operation|perform a database operation">perform a database operation</dfn> given a {{StorageArea}} |area| and a set of steps |steps|:

<div class="algorithm">
  1. Assert: |area|.\[[Name]] is a string (and in particular is not null).
  1. If |area| does not have an \[[DatabasePromise]] internal slot, or |area|'s [=relevant realm=] is not the [=current realm=], return [=a promise rejected with=] a {{TypeError}} exception.
  1. If |area|.\[[DatabasePromise]] is null, then:
    1. Set |area|.\[[DatabasePromise]] to [=a new promise=].
    1. TODO: reject if {{WindowOrWorkerGlobalScope/indexedDB}} does not exist (e.g. in a worklet).
    1. Let |dbName| be the concatenation of "<code>async-local-storage:</code>" and |area|.\[[Name]].
    1. Let |request| be the result of performing the steps listed in the description of {{IDBFactory}}'s {{IDBFactory/open()}} method on the object returned by the {{WindowOrWorkerGlobalScope/indexedDB}} IDL attribute, given the arguments |dbName| and 1.
    1. If those steps threw an exception, catch the exception and [=reject=] |area|.\[[DatabasePromise]] with it.
    1. Otherwise:
      1. [=Add a simple event listener=] to |request| for "<code>success</code>" that [=resolves=] |promise| with |request|'s [=request/result=].
      1. [=Add a simple event listener=] to |request| for "<code>error</code>" that [=rejects=] |promise| with |request|'s [=request/error=].
      1. [=Add a simple event listener=] to |request| for "<code>upgradeneeded</code>" that performs the following steps:
        1. Let |database| be |request|'s [=request/result=].
        1. Perform the steps listeed in the description of {{IDBDatabase}}'s {{IDBDatabase/createObjectStore()}} method on |database|, given the arguments "<code>store</code>".
        1. If these steps throw an exception, catch the exception and [=reject=] |area|.\[[DatabasePromise]] with it.
  1. Return the result of [=transforming=] |area|.\[[DatabasePromise]] by a fulfillment handler that performs the steps listed in |steps|.
</div>

<h2 id="acks" class="no-num">Acknowledgments</h2>

The editor would like to thank
Joshua Bell
for their contributions to this specification.

This standard is written by <a href="https://domenic.me/">Domenic Denicola</a> (<a href="https://google.com">Google</a>, <a href="mailto:d@domenic.me">d@domenic.me</a>).

Per <a href="https://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, to the extent possible under law, the editor has waived all copyright and related or neighboring rights to this work.

<h2 id="conformance" class="no-num">Conformance</h2>

This specification depends on the Infra Standard. [[!INFRA]]
